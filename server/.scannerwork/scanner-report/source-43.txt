import {inject, Getter} from '@loopback/core';
import {
  DefaultCrudRepository,
  repository,
  HasManyThroughRepositoryFactory,
} from '@loopback/repository';
import {MongoDbDataSource} from '../datasources';
import {Actors, ActorsRelations, Movies, MovieActor} from '../models';
import {MovieActorRepository} from './movie-actor.repository';
import {MoviesRepository} from './movies.repository';

export class ActorsRepository extends DefaultCrudRepository<
  Actors,
  typeof Actors.prototype.id,
  ActorsRelations
> {
  public readonly actorMovies: HasManyThroughRepositoryFactory<
    Movies,
    typeof Movies.prototype.id,
    MovieActor,
    typeof Actors.prototype.id
  >;

  constructor(
    @inject('datasources.mongoDb') dataSource: MongoDbDataSource,
    @repository.getter('MovieActorRepository')
    protected movieActorRepositoryGetter: Getter<MovieActorRepository>,
    @repository.getter('MoviesRepository')
    protected moviesRepositoryGetter: Getter<MoviesRepository>,
  ) {
    super(Actors, dataSource);
    this.actorMovies = this.createHasManyThroughRepositoryFactoryFor(
      'actorMovies',
      moviesRepositoryGetter,
      movieActorRepositoryGetter,
    );
    this.registerInclusionResolver(
      'actorMovies',
      this.actorMovies.inclusionResolver,
    );
  }
}
