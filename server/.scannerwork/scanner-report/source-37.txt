import {
  Entity,
  model,
  property,
  hasMany,
} from '@loopback/repository';
import {Actors} from './actors.model';
import {MovieActor} from './movie-actor.model';
import {Reviews} from './reviews.model';

@model()
export class Movies extends Entity {
  @property({
    type: 'string',
    id: true,
    generated: true,
  })
  id?: string;

  @property({
    type: 'string',
    required: true,
  })
  title: string;

  @property({
    type: 'number',
    required: true,
  })
  cost: number;

  @property({
    type: 'number',
    required: true,
  })
  yearReleased: number;

  @property({
    type: 'boolean',
  })
  comingSoon?: boolean;

  @property({
    type: 'boolean',
  })
  featured?: boolean;

  @property({
    type: 'date',
    default: () => new Date().toLocaleString('en-PH'),
  })
  createdAt?: string;

  @property({
    type: 'string',
    required: true,
  })
  imageLink: string;

  @property({
    type: 'string',
  })
  trailerLink?: string;

  @hasMany(() => Actors, {
    through: {model: () => MovieActor, keyFrom: 'movieId', keyTo: 'actorId'},
  })
  movieActors: Actors[];

  @hasMany(() => Reviews, {keyTo: 'movie'})
  movieReviews: Reviews[];

  constructor(data?: Partial<Movies>) {
    super(data);
  }
}

export interface MoviesRelations {
  // describe navigational properties here
}

export type MoviesWithRelations = Movies & MoviesRelations;
